Based on the transcript, we can build a trading strategy that uses the RSI (Relative Strength Index) indicator with specific tweaks, multi-timeframe analysis, price action confirmation, and a way to take profits. Here is a summary of the strategy outlined in the video:

1. Use the RSI indicator, but adjust the overbought and oversold levels to 80 and 20, respectively, instead of the default 70 and 30.
2. Confirm signals with multiple timeframes. For example, if you get an RSI signal on the hourly timeframe, check the daily timeframe for confirmation. If there is no confirmation, do not enter the trade.
3. Look for parabolic moves on short timeframes (e.g., 1 minute), and when the RSI reaches the adjusted overbought level (80), then check higher timeframes (e.g., 5 minutes and 15 minutes) for confirmation.
4. Use price action confirmation, like a double bar break, as additional confirmation to enter a trade.
5. Set a stop loss above the bar where you took the trade.
6. Take partial profits when the price returns to the midline of the RSI and the rest when the price reaches the VWAP (Volume Weighted Average Price).
7. Use the RSI to identify the strength of trends and trade pullbacks by entering trades when the RSI hits the midline (50) during a strong trend.
8. Combine the RSI strategy with price action strategies for increased effectiveness.

Let's outline a simple algorithmic trading strategy in Python incorporating some of these elements using pseudo-code:

```python
def trade_strategy(price_data, timeframes):
    # Assume price_data is a DataFrame with columns ['open', 'high', 'low', 'close', 'volume']
    
    # Calculate RSI with custom levels
    rsi_values = calculate_rsi(price_data['close'], overbought=80, oversold=20)

    # Confirm signal in multiple timeframes
    confirmations = [False] * len(timeframes)
    for i, timeframe in enumerate(timeframes):
        rsi_higher_tf = calculate_rsi(timeframe['close'], overbought=80, oversold=20)
        confirmations[i] = (rsi_values['signal'] and rsi_higher_tf['signal']) 
    
    # If confirmation across all timeframes, check for price action (pseudo-code)
    if all(confirmations):
        # Check for price action confirmation, like a double bar break (pseudo-code)
        if price_action_confirmation(price_data):
            # Enter trade
            entry_point = price_data[-1]['close']
            stop_loss = price_data[-1]['high'] # Example for a short trade
            # Calculate VWAP for profit targets (pseudo-code)
            vwap = calculate_vwap(price_data)
            take_profit = calculate_take_profit(rsi_values, vwap, entry_point)
            return entry_point, stop_loss, take_profit

    # Otherwise, do not enter trade
    return None
```

We'll need actual price data and adjustments for this strategy to work, including correct implementation of RSI calculation, VWAP calculation, and price action confirmation. Would you like to proceed with a practical implementation of part of this strategy or cover any specific aspect in more detail?